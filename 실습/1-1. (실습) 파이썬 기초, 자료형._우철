구구단

for i in range(2, 10):
    for j in range (1, 10):
        print(i * j, end = ' ')
    print()


커피 자판기

coffee = 3

while 'true': 
    money = int(input('돈을 넣어주세요: '))
    if money == 500:
        coffee -= 1
        print('원두커피를 드립니다')
    elif money > 500:
        coffee -= 1
        print('원두커피를 드리고, 거스름돈을 {}드립니다' .format(money - 500)) 
    else:
        print('금액이 부족합니다. 돈을 더 넣어주세요')
    if coffee == 0:
        print('원두커피가 매진되었습니다. 판매를 중지합니다')
        break

# STEP 1. 자료형 이해하기

변수에 주어진 자료형에 맞는 값(데이터)을 넣고 출력해본다.

# 1. 정수형

value = int(3) # 값을 입력하세요
print(type(value))

# 2. 실수형

value = float(2.332) # 값을 입력하세요
print(type(value))

# 3. 문자형

value = str('blue')  # 값을 입력하세요
print(type(value))

# 4. 리스트형

value = ['blue', 1, 2.2, 'moon']  # 값을 입력하세요
print(type(value))

# 5. 튜플형

value = (3, 4, 5)  # 값을 입력하세요
print(type(value))

# 6. 딕셔너리형(사전형)

value = {'name': '정우철', 'hobby':'수영'}  # 값을 입력하세요
print(type(value))

# 7. 집합형

value = {4, 5, 6, 8}  # 값을 입력하세요
print(type(value))

# 8. 불형

value =  1 == 1 # 값을 입력하세요
print(type(value))

# STEP 2. 연산자 이해하기

연산자를 사용해 다양한 연산작업을 실습해본다.

# 1. 사칙연산

# 기본 데이터
a = 10
b = 5

# 1-1. 덧셈
# plus 변수에 a와 b를 사용하여 덧셈을 완성하고 출력함수를 사용하여 출력하시오.
plus = a + b
print(plus)

# 1-2. 뺄셈
# minus 변수에 a와 b를 사용하여 뺄셈을 완성하고 출력함수를 사용하여 출력하시오. 
minus = a - b
print(minus)


# 1-3. 곱셈
# multiple 변수에 a와 b를 사용하여 곱셈을 완성하고 출력함수를 사용하여 출력하시오. 
multiple = a * b
print(multiple)


# 1-4. 나눗셈
# division 변수에 a와 b를 사용하여 나눗셈을 완성하고 출력함수를 사용하여 출력하시오. 
division = a / b
print(division)


# 2. 추가 연산자

# 2-2. 지수 연산
# pow 변수에 a와 b를 사용하여 지수(제곱)연산을 완성하고 출력함수를 사용하여 출력하시오. 
pow = a ** b
print(pow)


# 2-2. 나머지 연산
# remainder 변수에 a와 b를 사용하여 나머지연산을 완성하고 출력함수를 사용하여 출력하시오. 
remainder = a % b
print(remainder)


# 2-3. 몫 연산
# quota 변수에 a와 b를 사용하여 몫연산을 완성하고 출력함수를 사용하여 출력하시오. 
quota = a // b
print(quota)


# 3. 연산자를 활용해보자

# 3-1. 다음 문제의 답을 출력하시오
# 문제 : 가로가 3, 세로가 5인 직사각형과 한 변의 길이가 4인 정사각형이 있을 때,
#        두 사각형의 넓이을 더한 값을 코드로 작성하고 출력하시오.


a = 3 * 5
b = 4 * 4
print(a + b) 



# STEP 3. 숫자형 다루기

숫자형의 형변환과 반올림을 실습해본다.

pi = 3.1415926535897

# 1. pi를 정수형으로 변환하고 출력하시오.

print(int(pi))


one = 1

# 2. one을 실수형으로 변환하고 출력하시오.

print(float(one))

# 3. pi를 소숫점 셋째자리에서 반올림하고 출력하시오.

round(pi, 2)

# STEP 4. 문자형 다루기

문자형의 형변환, 길이구하기 등 다양한 문자열 함수를 실습해본다.


is_number = 1234567890

# 1. is_number 변수의 값을 문자형으로 형변환하고, is_string 변수에 넣고 출력하시오.

a = (str(is_number))
print(a)
is_string = print(type(a))


# 2. is_string 변수에 있는 문자열의 길이를 출력하시오.
print(len(a))

py_this = 'Simple is better than complex'
blank_str = '   Python   '

# 3. "_____"을 지우고 알맞은 코드를 작성하시오.

# 3-1. py_this 변수의 데이터에서 't'의 개수
print('t 개수 :', py_this .count('t'))

# 3-2. py_this 변수의 데이터에서 'is'의 개수
print('is 개수 :', py_this .count('is'))

# 3-3. py_this 변수의 데이터에서 'm'의 위치
print('m 위치 :', py_this.find('m'))

# 3-4. py_this 변수의 데이터를 대문자로 바꾸기
print('대문자로 변환 :', py_this.upper())

# 3-5. py_this 변수의 데이터를 소문자로 바꾸기
print('소문자로 변환 :', py_this.lower())

# 3-6. blank_str 변수의 데이터 양쪽 공백을 없애고 길이 구하기
print('양쪽 공백 제거 :', blank_str.strip())
print('양쪽 공백 제거 후 길이 :', len(blank_str.strip()) )

# 3-7. blank_str 변수의 데이터 왼쪽 공백을 없애고 길이 구하기
print('왼쪽 공백 제거 :', blank_str.lstrip())
print('왼쪽 공백 제거 후 길이 :', len(blank_str.lstrip()))

# 3-8. blank_str 변수의 데이터 오른쪽 공백을 없애고 길이 구하기
print('오른쪽 공백 제거 :', blank_str.rstrip())
print('오른쪽 공백 제거 후 길이 :', len(blank_str.rstrip()))

# 3-9. py_this 변수의 데이터에서 'Simple'을 '단순한 것'으로 바꾸고 출력하기
print('문자열 치환 :', py_this.replace('Simple', '단순한 것'))

# 3-10. py_this 변수의 데이터를 띄어쓰기 단위로 나누기
print('문자열 나누기 :', py_this.split())

# 3-11. py_this 변수의 데이터에 '-' 구분자 넣기
print('문자열에 구분자 넣기 : ','-'.join(py_this))

text = 'Life is timing'

# 4. "_____"을 지우고 알맞은 코드를 작성하시오.

# 4-1. text 변수의 데이터에서 8번 위치에 있는 문자를 출력하시오.
print('8번 문자 :', text[8])

# 4-2. text 변수의 데이터에서 'Life' 단어를 출력하시오.
print('Life 슬라이싱 :', text[0:4])

# 4-3. text 변수의 데이터에서 'is' 단어를 출력하시오.
print('is 슬라이싱 :', text[5:7])

# 4-4. text 변수의 데이터에서 'timing' 단어를 출력하시오.
print('timing 슬라이싱 :', text[8:])

# 5. 문자열 포매팅으로 'I have a dream'을 완성시켜서 출력하시오.

fm_text = 'I {} a dream'.format('have')
print(fm_text)

fm_text2 = 'I {} a {}'.format('have', 'dream')
print(fm_text2)

word = 'dream'
fm_text3 = f'I have a {word}' 
print(fm_text3)

# STEP 5. 리스트 다루기

리스트의 함수를 통해 리스트를 실습해본다.


IU_playlist = ['좋은날', '너랑 나', '분홍신', '밤편지', '삐삐']

# 1. IU_playlist의 길이를 출력하시오
len(IU_playlist)

# 2. "_____"을 지우고 알맞은 코드를 작성하시오.

# 2-1. IU_playlist 마지막에 '블루밍'을 추가하고 IU_playlist를 출력하시오.
IU_playlist.append('블루밍')
print('리스트 마지막 추가 :', IU_playlist)

# 2-2. IU_playlist 처음에 '미아보호소'를 추가하고 IU_playlist를 출력하시오.
IU_playlist.insert(0, '미아보호소')
print('리스트 처음 추가 :', IU_playlist)

# 2-3. IU_playlist에 add_list를 추가하고 IU_playlist를 출력하시오.
add_list = ['Boo', '있잖아', '마시멜로우', '잔소리']
IU_playlist.extend(add_list)
print('여러 요소 추가 :', IU_playlist)

# 2-4. IU_playlist를 정렬하고 IU_playlist를 출력하시오.
print('리스트 정렬 :', IU_playlist.sort())

# 2-5. IU_playlist 역순정렬하고 IU_playlist를 출력하시오.
print('리스트 역순정렬 :', IU_playlist.reverse())

# 2-6. IU_playlist에서 '블루밍'의 위치를 출력하시오.
print('리스트 요소 위치 :', IU_playlist.index('블루밍'))

# 2-7. IU_playlist에서 '미아보호소'를 삭제하고 IU_playlist를 출력하시오.
IU_playlist.remove('미아보호소')
print('리스트 요소 삭제 :', IU_playlist)

# 2-8. IU_playlist 마지막 요소를 제거하고 출력하시오.
IU_playlist.pop()
print('리스트 pop :', IU_playlist)

# 2-9. IU_playlist에서 '좋은날'은 몇 곡인지 갯수를 출력하시오.
print('리스트 요소 개수 :', IU_playlist.count('좋은날'))

# 2-10. IU_playlist에서 3번 인덱스에 있는 곡은 무엇인지 출력하시오.
print('리스트 인덱스 :', IU_playlist[3])

# 2-11. IU_playlist에서 첫번째 곡에서 3번째 곡까지 출력하시오.
print('리스트 슬라이싱 :', IU_playlist[0:3])

# 2-12. IU_playlist에서 3번 인덱스에 있는 노래를 '시간의 바깥'으로 수정하고 IU_playlist를 출력하시오.
IU_playlist.insert(3, '시간의 바깥')
print('리스트 요소 수정 :', IU_playlist)

# 2-13. IU_playlist에서 3번 인덱스에 있는 노래를 제거하고 IU_playlist를 출력하시오.
IU_playlist.remove('시간의 바깥')
print('리스트 요소 제거 :', IU_playlist)

# STEP 6. 딕셔너리 다루기

딕셔너리 함수를 통해 딕셔너리를 실습해본다.


food = {'a':'apple', 'b':'banana', 'c':'chocolate', 'd':'donut', 'e':'egg'}

# 1. "_____"을 지우고 알맞은 코드를 작성하시오.

# 1-1. food의 Key만 출력하시오.
print('딕셔너리 키 :', food.keys())

# 1-2. food의 Value만 출력하시오.
print('딕셔너리 값 :', food.values())

# 1-3. food의 Key, value 쌍을 출력하시오.
print('딕셔너리 쌍 :', food.items())

# 1-4. food에서 egg를 출력하시오.
print('딕셔너리 키-값 가져오기 :', food.get('e'))

# 1-5. food에 Key가 'p'이고, Value가 'pizza'를 추가하고 출력하시오.
food['p'] = 'pizza'
print('딕셔너리 추가 :', food)

# 1-6. food 데이터를 모두 지우고 출력하시오.
food.clear()
print('딕셔너리 삭제 :', food)

# STEP 7. 집합형 다루기

집합 함수를 통해 집합을 실습해본다.

week = ['월', '화', '수', '수', '해', '일']

# 1. "_____"을 지우고 알맞은 코드를 작성하시오.

# 1-1. week 리스트로 week_set 집합을 만들고 week_set을 출력하시오.
week_set = set(week)
print('집합 :', week_set)

# 1-2. week_set에 '목'을 넣고 출력하시오.
week_set.add('목')
print('집합 요소 추가:', week_set)

# 1-3. week_set에 '금', '토'를 넣고 출력하시오.
week_set.update('금', '토')
print('집합 요소 여러 개 추가 :', week_set)

# 1-4. week_set에서 '해'를 삭제하고 출력하시오.
week_set.remove('해')
print('집합 요소 삭제 :', week_set)

# 2. 집합의 연산
# "_____"을 지우고 알맞은 코드를 작성하시오.

ohaeng_set = set(['목', '화', '토', '금', '수'])

# 2-1. week_set과 ohaeng_set의 교집합을 구하고 출력하시오.
print('교집합 :', week_set & ohaeng_set)

# 2-2. week_set과 ohaeng_set의 합집합을 구하고 출력하시오.
print('합집합 :',week_set | ohaeng_set)

# 2-3. week_set과 ohaeng_set의 차집합을 구하고 출력하시오.
print('차집합 :', week_set - ohaeng_set)

# STEP 8. 불형 다루기

불형의 여러가지 형태를 실습해본다.


# 1. 참인 형태를 3가지 이상 만들어 True가 나오는지 출력하시오.
print(20 == 20)
print(10 != 20)
print(10 <= 30)

# 2. 거짓인 형태를 3가지 이상 만들어 False가 나오는지 출력하시오.
print(153 == 1253)
print(1001 != 1001)
print(300 > 300000)

